import logging
from typing import Optional

from pydantic import BaseModel, field_validator
from ai.prompts.base_prompt import BasePrompt
from domain.dto.courses.course_plan import CoursePlanDto
from .get_additional_inputs_prompt import get_course_plan_description
from ai.util.tool_decorator import tool

class SectionOutline(BaseModel):
    title: str
    description: str

class LessonOutline(BaseModel):
    internal_name: str
    focus_area: str
    title: str
    description: str
    sections: list[SectionOutline]
    
    @field_validator("sections", mode="after")
    def verify_sections_exist(cls, value):
        if not value:
            raise ValueError("All lessons must contain sections")
        
        return value

class ModuleOutline(BaseModel):
    internal_name: str
    title: str
    focus_area: str
    description: str
    lessons: list[LessonOutline]
    
    @field_validator("lessons", mode="after")
    def verify_lessons_exist(cls, value):
        if not value:
            raise ValueError("All modules must contain lessons")
        
        return value

class CourseOutline(BaseModel):
    course_subject: str
    course_title: str
    description: str
    modules: list[ModuleOutline]
    key_outcomes: list[str]
    
    @field_validator("modules", mode="after")
    def verify_modules_exist(cls, value):
        if not value:
            raise ValueError("A course must contain modules")
        
        return value

class GenerateCourseOutlinePrompt(BasePrompt):
    planning_complete: bool = False
    outline: Optional[CourseOutline] = None
    
    def setup(self) -> None:        
        self.set_system_prompt(f"""
You are an AI designed to create structured course syllabi based on user information and learning requests. Your task is to generate a syllabus outline that includes sections such as Introduction, Learning Objectives, Modules, Hands-On Practice/Assignments, Assessments, Resources, and Conclusion. Each module can optionally include a quiz at the end, if it makes sense, and each lesson can optionally include a hands-on exercise, such as coding or using a system shell in a sandbox environment, if it aligns with the learning objectives. These sections should contain placeholders or brief descriptions, as the detailed content will be generated by another system.
""")
    
    @tool("Provide a structured plan for the course syllabus", force_if=lambda self: self.planning_complete)
    async def provide_course_outline(self, outline: CourseOutline) -> CourseOutline:
        self.outline = outline
    
    async def get_outline(self, plan: CoursePlanDto, profile_text: str) -> CourseOutline:
        from ai.models.gpt_4o import GPT4o
        model = GPT4o()
        
        plan_text = get_course_plan_description(plan)
        
        if plan.followup_answers:
            plan_text += "\n\nFollow-up Answers:\n"
            for key, value in plan.followup_answers.items():
                if isinstance(value, list):
                    value = ", ".join(value)
                    
                plan_text += f"{key}: {value}\n"
        
        logging.info(f"Profile Text: {profile_text}")
        logging.info(f"Plan Text: {plan_text}")
        
        await self.think(model, f"""## User Information:
{profile_text}

## Syllabus Request:
{plan_text}

Please brainstorm a high-level plan for the course syllabus. Let's start with developing the modules - the primary sections of the course.
Each module should have a clear objective and be separated by a logical progression of topics.
""".strip())
        
        await self.think(model, f"""
Great! Now that we have the modules, let's focus on each module's content.
Next, I would like you to generate the overall objectives for each module and create lessons that facilitate the learning process in order
to achieve those objectives. Include lesson titles and a brief overview of the content covered in each lesson.                   
""".strip())
        
        await self.think(model, f"""
Now that we have lessons figured out, let's move on to the sections of each lesson. These can be thought of as groupings of content
that will help the student parse the information in a structured way. Each section should have a clear purpose and contribute to the overall
lesson objective. Include the title of each section and what content it will cover.                   
""".strip())
        
        self.planning_complete = True
        
        self.add_user_message(f"""
Finally, I would like you to generate a full course outline using the information we've collected here. Use your tool to provide a structured representation that will be given to the instructor.
Take careful consideration of the tool schema in order to provide the data in the correct format.                   
""".strip())

        await model.get_responses(self)
        
        if not self.outline:
            raise ValueError("No course outline was generated")
        
        return self.outline